@startuml
participant Actor
participant "DeplacementIntelligent : a" as DeplacementIntelligent
activate Actor
Actor -> DeplacementIntelligent : deplacer(p,labyrinthe)
activate DeplacementIntelligent
create AdapterLaby
DeplacementIntelligent -> AdapterLaby : new
activate AdapterLaby
AdapterLaby --> DeplacementIntelligent
deactivate AdapterLaby
DeplacementIntelligent -> Algorithme : resoudre(Laby,)
activate Algorithme
Algorithme -> Dijkstra : resoudre
activate Dijkstra
Dijkstra -> Graphe : listeNoeuds
activate Graphe
Graphe --> Dijkstra
deactivate Graphe
create Valeur
Dijkstra -> Valeur : new
activate Valeur
Valeur --> Dijkstra
deactivate Valeur
Dijkstra -> Valeur : setValeur
activate Valeur
Valeur --> Dijkstra
deactivate Valeur
Dijkstra -> Valeur : setValeur
activate Valeur
Valeur --> Dijkstra
deactivate Valeur
Dijkstra -> Dijkstra : minimun
activate Dijkstra
Dijkstra -> Valeur : getValeur
activate Valeur
Valeur --> Dijkstra
deactivate Valeur
Dijkstra -> Valeur : getValeur
activate Valeur
Valeur --> Dijkstra
deactivate Valeur
Dijkstra --> Dijkstra
deactivate Dijkstra
Dijkstra -> Graphe : suivants
activate Graphe
Graphe --> Dijkstra
deactivate Graphe
Dijkstra -> Valeur : getValeur
activate Valeur
Valeur --> Dijkstra
deactivate Valeur
Dijkstra -> Valeur : getValeur
activate Valeur
Valeur --> Dijkstra
deactivate Valeur
Dijkstra -> Valeur : setValeur
activate Valeur
Valeur --> Dijkstra
deactivate Valeur
Dijkstra -> Valeur : setParent
activate Valeur
Valeur --> Dijkstra
deactivate Valeur
Dijkstra --> Algorithme
deactivate Dijkstra
Algorithme --> DeplacementIntelligent
deactivate Algorithme
DeplacementIntelligent -> Valeur : calculerChemin
activate Valeur
Valeur -> Valeur : getParent
activate Valeur
Valeur --> Valeur
deactivate Valeur
Valeur -> Valeur : getParent
activate Valeur
Valeur --> Valeur
deactivate Valeur
Valeur --> DeplacementIntelligent
deactivate Valeur
DeplacementIntelligent -> Personnage : peutBouger
activate Personnage
Personnage --> DeplacementIntelligent
deactivate Personnage
return
@enduml