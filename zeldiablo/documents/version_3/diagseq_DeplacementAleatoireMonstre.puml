@startuml
participant "LabyJeu" as L
participant "Timer" as T
participant "Labyrinthe" as La
participant "Monstre" as M
participant "Random" as R
title : Deplacement aléatoire des monstres
L -> L : deplacerMonstre()
activate L
L -> T : scheduleAtFixedRate()
activate T
loop "tant que le jeu n'est pas fini"
    T -> La : deplacerMonstre(monstre)
    activate La
    La -> M : getX()
    activate M
    M -->> La : return x
    deactivate M
    La -> M : getY()
    activate M
    M -->> La : return y
    deactivate M
    La -> R : nextInt(actions.length)
    activate R
    R -->> La : return ind
    deactivate R
    La -> La : getSuivant(courante[0], courante[1], actions[ind])
    activate La
    La -->> La : return suivante
    deactivate La
    La -> M : etrePresent(suivante[0] , suivante[1])
    activate M
    M -->> La : return presence
    deactivate M
    La -> La : murs[suivante[0]][suivante[1]]
    activate La
    La -->> La : return estValide
    deactivate La
    La -> M : perdrePv(CasePieges.getDegats())
    activate M
    M -->> La : return
    deactivate M
    La -> M : setX(suivante[0])
    activate M
    M -->> La : return
    deactivate M
    La -> M : setY(suivante[1])
    activate M
    M -->> La : return
    deactivate M
    La -->> T : return
    deactivate La
end
T -->> L : return
deactivate T
L -->> L : return
deactivate L
note across
On loop sur la liste de monstre on choisit de maniere aleatoire des coordonnes on test que ce n'est ni le personnage ni un mur et si c'est le cas on créé le mosntre
end note
@enduml